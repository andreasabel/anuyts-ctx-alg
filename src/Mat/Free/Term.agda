{-# OPTIONS --cubical --type-in-type #-}

open import Cubical.Foundations.Everything renaming (Iso to _‚âÖ_)
open import Cubical.Data.List
open import Cubical.Data.List.Properties
open import Cubical.Data.List.FinData renaming (lookup to _!_)
open import Cubical.Data.Prod
open import Cubical.Data.W.Indexed
open import Cubical.Data.FinData
open import Cubical.Data.Sum
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Empty
open import Cubical.Data.Nat
open import Cubical.Foundations.Structure
open import Cubical.Categories.Category
open import Cubical.Categories.Functor renaming (ùüô‚ü®_‚ü© to ftrId)
open import Cubical.Categories.Instances.Sets
open import Cubical.Categories.Constructions.Product
open import Cubical.Categories.Monad.Base
open import Cubical.Categories.NaturalTransformation.Base
open import Cubical.Categories.Instances.FunctorAlgebras
open import Cubical.Categories.Instances.EilenbergMoore

open import Mat.Signature
open import Mat.Free.Presentation

module Mat.Free.Term {sign : Signature} (fmat : PresentationF sign) where

open _‚âÖ_
open Category renaming (_‚àò_ to _‚äö_)
open Functor
open Signature sign
open PresentationF fmat
open Algebra renaming (str to algStr)
open AlgebraHom
open IsEMAlgebra

data TermF (X : MType) : (sortOut : Sort) ‚Üí Type
isSetTermF : (msetX : MSet) (sortOut : Sort) ‚Üí isSet (TermF (mtyp msetX) sortOut)

msetTermF : MSet ‚Üí MSet
fst (msetTermF msetX sortOut) = TermF (mtyp msetX) sortOut
snd (msetTermF msetX sortOut) = isSetTermF msetX sortOut

data TermF X where
  varF : ‚àÄ {sortOut} ‚Üí X sortOut ‚Üí TermF X sortOut
  astF : ‚àÄ {sortOut} ‚Üí Term1 (TermF X) sortOut ‚Üí TermF X sortOut

RepTermF : (X : MType) (sortOut : Sort) ‚Üí Type
RepTermF X sortOut =
  IW (Œª sort ‚Üí X sort ‚äé Operation sort)
    (Œª sort ‚Üí ‚äé.elim (Œª v ‚Üí ‚ä•) Œª o ‚Üí Fin (length (arity o)))
    (Œª sort ‚Üí ‚äé.elim (Œª v ()) (Œª o p ‚Üí arity o ! p))
    sortOut

toRepTermF : (X : MType) (sortOut : Sort) ‚Üí TermF X sortOut ‚Üí RepTermF X sortOut
toRepTermF X sortOut (varF v) = node (inl v) (Œª ())
toRepTermF X sortOut (astF (term1 o args)) =
  node (inr o) Œª p ‚Üí toRepTermF X (arity o ! p) (args p)

fromRepTermF : (X : MType) (sortOut : Sort) ‚Üí RepTermF X sortOut ‚Üí TermF X sortOut
fromRepTermF X sortOut (node (inl v) u) = varF v
fromRepTermF X sortOut (node (inr o) args) = astF (term1 o Œª p ‚Üí fromRepTermF X (arity o ! p) (args p))

fromToRepTermF : (X : MType) (sortOut : Sort) (t : TermF X sortOut)
  ‚Üí fromRepTermF X sortOut (toRepTermF X sortOut t) ‚â° t
fromToRepTermF X sortOut (varF v) = refl
fromToRepTermF X sortOut (astF (term1 o args)) i =
  astF (term1 o Œª p ‚Üí fromToRepTermF X (arity o ! p) (args p) i)

toFromRepTermF : (X : MType) (sortOut : Sort) (rt : RepTermF X sortOut)
  ‚Üí toRepTermF X sortOut (fromRepTermF X sortOut rt) ‚â° rt
toFromRepTermF X sortOut (node (inl v) u) = cong (node (inl v)) (funExt (Œª ()))
toFromRepTermF X sortOut (node (inr o) args) i =
  node (inr o) (Œª p ‚Üí toFromRepTermF X (arity o ! p) (args p) i)

isoRepTermF : (X : MType) (sortOut : Sort) ‚Üí TermF X sortOut ‚âÖ RepTermF X sortOut
fun (isoRepTermF X sortOut) = toRepTermF X sortOut
inv (isoRepTermF X sortOut) = fromRepTermF X sortOut
rightInv (isoRepTermF X sortOut) = toFromRepTermF X sortOut
leftInv (isoRepTermF X sortOut) = fromToRepTermF X sortOut

pathRepTermF : (X : MType) (sortOut : Sort) ‚Üí TermF X sortOut ‚â° RepTermF X sortOut
pathRepTermF X sortOut = ua (isoToEquiv (isoRepTermF X sortOut))

isSetRepTermF : (msetX : MSet) (sortOut : Sort) ‚Üí isSet (RepTermF (mtyp msetX) sortOut)
isSetRepTermF msetX sortOut = isOfHLevelSuc-IW 1 (Œª sort ‚Üí isSet‚äé (str (msetX sort)) isSetOperation) sortOut

isSetTermF msetX sortOut = subst‚Åª isSet (pathRepTermF (mtyp msetX) sortOut) (isSetRepTermF msetX sortOut)

mapTermF : ‚àÄ {X Y} ‚Üí (‚àÄ sort ‚Üí X sort ‚Üí Y sort) ‚Üí ‚àÄ sort ‚Üí TermF X sort ‚Üí TermF Y sort
mapTermF f sort (varF x) = varF (f sort x)
mapTermF f sort (astF (term1 o args)) = astF (term1 o Œª p ‚Üí mapTermF f (arity o ! p) (args p))

mapTermF-id : ‚àÄ {X} ‚Üí mapTermF (Œª sort ‚Üí idfun (X sort)) ‚â° (Œª sort ‚Üí idfun (TermF X sort))
mapTermF-id i sort (varF x) = varF x
mapTermF-id i sort (astF (term1 o args)) = astF (term1 o (Œª p ‚Üí mapTermF-id i (arity o ! p) (args p)))

mapTermF-‚àò : ‚àÄ {X Y Z : MType} ‚Üí (g : ‚àÄ sort ‚Üí Y sort ‚Üí Z sort) ‚Üí (f : ‚àÄ sort ‚Üí X sort ‚Üí Y sort) ‚Üí
  mapTermF (Œª sort ‚Üí g sort ‚àò f sort) ‚â° (Œª sort ‚Üí mapTermF g sort ‚àò mapTermF f sort)
mapTermF-‚àò g f i sort (varF x) = varF (g sort (f sort x))
mapTermF-‚àò g f i sort (astF (term1 o args)) = astF (term1 o (Œª p ‚Üí mapTermF-‚àò g f i (arity o ! p) (args p)))

ftrTermF : Functor catMSet catMSet
F-ob ftrTermF = msetTermF
F-hom ftrTermF = mapTermF
F-id ftrTermF = mapTermF-id
F-seq ftrTermF f g = mapTermF-‚àò g f

-- It's a monad

open NatTrans

Œ∑TermF : NatTrans (ftrId catMSet) ftrTermF
N-ob Œ∑TermF msetX sortOut = varF
N-hom Œ∑TermF {msetX} {msetY} f = refl

joinTermF : ‚àÄ {X} sort ‚Üí TermF (TermF X) sort ‚Üí TermF X sort
joinTermF sort (varF t) = t
joinTermF sort (astF (term1 o args)) = astF (term1 o (Œª p ‚Üí joinTermF (arity o ! p) (args p)))

joinTermF-nat : ‚àÄ {X Y : MType} f sort ‚Üí (t : TermF (TermF X) sort)
  ‚Üí joinTermF {X = Y} sort (mapTermF (mapTermF f) sort t) ‚â° mapTermF f sort (joinTermF sort t)
joinTermF-nat f sort (varF t) = refl
joinTermF-nat f sort (astF (term1 o args)) i = astF (term1 o Œª p ‚Üí joinTermF-nat f (arity o ! p) (args p) i)

ŒºTermF : NatTrans (funcComp ftrTermF ftrTermF) ftrTermF
N-ob ŒºTermF msetX = joinTermF
N-hom ŒºTermF {msetX} {msetY} f = funExt Œª sort ‚Üí funExt Œª t ‚Üí joinTermF-nat f sort t

open IsMonad

ismonadTermF : IsMonad ftrTermF
Œ∑ ismonadTermF = Œ∑TermF
Œº ismonadTermF = ŒºTermF
idl-Œº ismonadTermF = makeNatTransPathP (Œª i ‚Üí F-rUnit i) (Œª i ‚Üí ftrTermF) refl
idr-Œº ismonadTermF = makeNatTransPathP (Œª i ‚Üí F-lUnit i) (Œª i ‚Üí ftrTermF) lemma
  where lemma : (Œª msetX sort t ‚Üí joinTermF sort (mapTermF (Œª sortOut ‚Üí varF) sort t)) ‚â°
                (Œª msetX sort t ‚Üí t)
        lemma i msetX sort (varF x) = varF x
        lemma i msetX sort (astF (term1 o args)) = astF (term1 o Œª p ‚Üí lemma i msetX (arity o ! p) (args p))
assoc-Œº ismonadTermF = makeNatTransPathP (Œª i ‚Üí F-assoc i) (Œª i ‚Üí ftrTermF) lemma
  where lemma : (Œª msetX sort t ‚Üí joinTermF sort (mapTermF joinTermF sort t)) ‚â°
                (Œª msetX sort t ‚Üí joinTermF sort (joinTermF sort t))
        lemma i msetX sort (varF ttx) = joinTermF sort ttx
        lemma i msetX sort (astF (term1 o args)) = astF (term1 o Œª p ‚Üí lemma i msetX (arity o ! p) (args p))

monadTermF : Monad catMSet
monadTermF = ftrTermF , ismonadTermF

catModelF : Category ‚Ñì-zero ‚Ñì-zero
catModelF = EMCategory monadTermF

ModelF : Type ‚Ñì-zero
ModelF = ob catModelF

ModelFHom : (mFA mFB : ModelF) ‚Üí Type ‚Ñì-zero
ModelFHom = Hom[_,_] catModelF

algStrFModel1 : ((algebra msetA Œ±) : Model1) ‚Üí IsAlgebra ftrTermF msetA
algStrFModel1 (algebra msetA Œ±) sort (varF a) = a
algStrFModel1 (algebra msetA Œ±) sort (astF (term1 o args)) =
  Œ± sort (term1 o Œª p ‚Üí algStrFModel1 (algebra msetA Œ±) (arity o ! p) (args p))

algStrFModel1‚àòjoin :
  ((algebra msetA Œ±) : Model1) ‚Üí
  ‚àÄ sort ‚Üí
  (tta : TermF (Œª sort‚ÇÅ ‚Üí TermF (Œª sort‚ÇÇ ‚Üí fst (msetA sort‚ÇÇ)) sort‚ÇÅ) sort) ‚Üí
  algStrFModel1 (algebra msetA Œ±) sort (joinTermF sort tta) ‚â°
  algStrFModel1 (algebra msetA Œ±) sort (mapTermF (algStrFModel1 (algebra msetA Œ±)) sort tta)
algStrFModel1‚àòjoin (algebra msetA Œ±) sort (varF ta) = refl
algStrFModel1‚àòjoin (algebra msetA Œ±) sort (astF (term1 o args)) =
  cong (Œ± sort) (cong (term1 o) (funExt Œª p ‚Üí algStrFModel1‚àòjoin (algebra msetA Œ±) (arity o ! p) (args p)))

model1toF : Model1 ‚Üí ModelF
carrier (fst (model1toF (algebra msetA Œ±))) = msetA
algStr (fst (model1toF (algebra msetA Œ±))) = algStrFModel1 (algebra msetA Œ±)
str-Œ∑ (snd (model1toF (algebra msetA Œ±))) = refl
str-Œº (snd (model1toF (algebra msetA Œ±))) = funExt Œª sort ‚Üí funExt Œª tta ‚Üí algStrFModel1‚àòjoin (algebra msetA Œ±) sort tta

model1toF-ishom : ‚àÄ {(algebra msetA Œ±) (algebra msetB Œ≤) : Algebra ftrTerm1} ‚Üí ((algebraHom f isalgF)
  : Model1Hom (algebra msetA Œ±) (algebra msetB Œ≤)) ‚Üí ‚àÄ sort ta
  ‚Üí f sort (algStrFModel1 (algebra msetA Œ±) sort ta) ‚â° algStrFModel1 (algebra msetB Œ≤) sort (mapTermF f sort ta)
model1toF-ishom {algebra msetA Œ±} {algebra msetB Œ≤} (algebraHom f commut) sort (varF a) = refl
model1toF-ishom {algebra msetA Œ±} {algebra msetB Œ≤} (algebraHom f commut) sort (astF (term1 o args)) =
  f sort (Œ± sort (term1 o (Œª p ‚Üí algStrFModel1 (algebra msetA Œ±) (arity o ! p) (args p))))
    ‚â°‚ü® commut' sort (term1 o Œª p ‚Üí algStrFModel1 (algebra msetA Œ±) (arity o ! p) (args p)) ‚ü©
  Œ≤ sort (term1 o (Œª p ‚Üí f (arity o ! p) (algStrFModel1 (algebra msetA Œ±) (arity o ! p) (args p))))
    ‚â°‚ü® cong (Œ≤ sort) (cong (term1 o) (funExt Œª p ‚Üí model1toF-ishom (algebraHom f commut) (arity o ! p) (args p))) ‚ü©
  Œ≤ sort (term1 o (Œª p ‚Üí algStrFModel1 (algebra msetB Œ≤) (arity o ! p) (mapTermF f (arity o ! p) (args p)))) ‚àé
  where commut' : ‚àÄ sort ((term1 o' args') : Term1 (mtyp msetA) sort)
          ‚Üí f sort (Œ± sort (term1 o' args')) ‚â° Œ≤ sort (term1 o' Œª p ‚Üí f (arity o' ! p) (args' p))
        commut' sort ta i = commut i sort ta

model1toF-hom : ‚àÄ {m1A m1B} ‚Üí (m1F : Model1Hom m1A m1B) ‚Üí ModelFHom (model1toF m1A) (model1toF m1B)
carrierHom (model1toF-hom {algebra msetA Œ±} {algebra msetB Œ≤} (algebraHom f commut)) = f
strHom (model1toF-hom {algebra msetA Œ±} {algebra msetB Œ≤} (algebraHom f commut)) =
  funExt Œª sort ‚Üí funExt Œª ta ‚Üí model1toF-ishom (algebraHom f commut) sort ta

ftrForgetModelF : Functor catModelF catMSet
ftrForgetModelF = ForgetEMAlgebra monadTermF

ftrFreeModelF : Functor catMSet catModelF
ftrFreeModelF = FreeEMAlgebra monadTermF

ftrModel1toF : Functor catModel1 catModelF
F-ob ftrModel1toF = model1toF
F-hom ftrModel1toF = model1toF-hom
F-id ftrModel1toF = AlgebraHom‚â° ftrTermF refl
F-seq ftrModel1toF algF algG = AlgebraHom‚â° ftrTermF refl

nt1toF : NatTrans ftrTerm1 ftrTermF
N-ob nt1toF msetA sort (term1 o args) = astF (term1 o Œª p ‚Üí varF (args p))
N-hom nt1toF f = refl

ftrModelFto1 : Functor catModelF catModel1
ftrModelFto1 = funcComp {-{D = AlgebrasCategory ftrTermF}{E = catModel1}{C = catModelF}-} (AlgebrasFunctor {F = ftrTerm1} {G = ftrTermF} nt1toF) (ForgetEM monadTermF)
  -- For some reason, this takes forever.
