{-# OPTIONS --cubical --type-in-type #-}

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Function
open import Cubical.Foundations.Isomorphism renaming (Iso to _≅_)
open import Cubical.Data.List.FinData renaming (lookup to _!_)
open import Cubical.Data.Sigma
open import Cubical.Foundations.Structure hiding (str)
open import Cubical.Categories.Category
import Cubical.Categories.Category.Precategory as P
open import Cubical.Categories.Functor
open import Cubical.Categories.NaturalTransformation
open import Cubical.Categories.Monad.Base
open import Cubical.Categories.Instances.FunctorAlgebras
open import Cubical.Categories.Instances.EilenbergMoore
open import Cubical.Categories.Instances.Categories
open import Cubical.Categories.Adjoint
open import Cubical.Categories.Constructions.FullSubcategory

open import Mat.Signature
open import Mat.Free.Presentation
import Mat.Free.Term
import Mat.Term
open import Mat.Presentation

-- Terms of the MAT generated by a MAT presentation
module Mat.Model {sign : Signature} (mat : Presentation sign) where

open Signature sign
open Presentation
open PresentationF (getPresentationF mat)
open Mat.Free.Term (getPresentationF mat)
open EqTheory (getEqTheory mat)
open Mat.Term mat

open Category hiding (_∘_)
open Functor
open Algebra
open IsMonad
open NatTrans
open IsEMAlgebra
open NaturalBijection
open _⊣_
open AlgebraHom
open _≅_
private
  module P≅ = P.PrecatIso

-- Models are Eilenberg-Moore algebras of monadTerm
catModel : Category ℓ-zero ℓ-zero
catModel = EMCategory monadTerm

Model : Type
Model = ob catModel

ModelHom : (mA mB : Model) → Type
ModelHom = Hom[_,_] catModel

-- Forgetful functor sending models to their carrier
ftrForgetModel : Functor catModel catMSet
ftrForgetModel = ForgetEMAlgebra monadTerm

-- Free model functor
ftrFreeModel : Functor catMSet catModel
ftrFreeModel = FreeEMAlgebra monadTerm

adjModel : ftrFreeModel ⊣ ftrForgetModel
adjModel = emAdjunction monadTerm

-- Recursion/folding (with metavariables) and properties

mFoldModel : (msetX : MSet) → (mA : Model)
  → catMSet [ msetX , F-ob ftrForgetModel mA ]
  → catModel [ F-ob ftrFreeModel msetX , mA ]
mFoldModel msetX mA = _♯ adjModel {c = msetX} {d = mA}

foldModel : (msetX : MSet) → (mA : Model)
  → catMSet [ msetX , F-ob ftrForgetModel mA ]
  → ∀ sort → Term (mtyp msetX) sort → typ (carrier (fst mA) sort)
foldModel msetX mA f = mFoldModel msetX mA f .carrierHom

mFoldModel-nat :  (msetX : MSet) → (mA mB : Model)
  → (mG : catModel [ mA , mB ])
  → (f : catMSet [ msetX , F-ob ftrForgetModel mA ])
  → mFoldModel msetX mB (_⋆_
      catMSet
      {x = msetX}
      {y = F-ob ftrForgetModel mA}
      {z = F-ob ftrForgetModel mB}
      f
      (F-hom ftrForgetModel {x = mA} {y = mB} mG)
    )
  ≡ _⋆_ catModel {x = F-ob ftrFreeModel msetX} {mA} {mB} (mFoldModel msetX mA f) mG
mFoldModel-nat msetX mA mB mG f =
  sym (adjNatInD' adjModel {c = msetX} {d = mA} {d' = mB} f mG)

foldModel-nat : (msetX : MSet) → (mA mB : Model)
  → (mG : catModel [ mA , mB ])
  → (f : catMSet [ msetX , F-ob ftrForgetModel mA ])
  → foldModel msetX mB (λ sort → F-hom ftrForgetModel {x = mA} {y = mB} mG sort ∘ f sort)
   ≡ (λ sort → F-hom ftrForgetModel {x = mA} {y = mB} mG sort ∘ foldModel msetX mA f sort)
foldModel-nat msetX mA mB mG f i = mFoldModel-nat msetX mA mB mG f i .carrierHom

mFoldModel-uniq : (msetX : MSet) → (mA : Model)
  → (f : catMSet [ msetX , F-ob ftrForgetModel mA ])
  → (mG : catModel [ F-ob ftrFreeModel msetX , mA ])
  → (λ sort → mG .carrierHom sort ∘ pureTerm sort) ≡ f
  → mFoldModel msetX mA f ≡ mG
mFoldModel-uniq msetX mA f mG ef =
  mFoldModel msetX mA f
    ≡⟨⟩
  _♯ adjModel {c = msetX} {d = mA} f
    ≡⟨ cong (_♯ adjModel {c = msetX} {d = mA}) (sym ef) ⟩
  _♯ adjModel {c = msetX} {d = mA} (λ sort → mG .carrierHom sort ∘ pureTerm sort)
    ≡⟨⟩
  _♯ adjModel {c = msetX} {d = mA} (_♭ adjModel {c = msetX} {d = mA} mG)
    ≡⟨ adjModel .adjIso {c = msetX} {d = mA} .leftInv mG ⟩
  mG ∎

foldModel-uniq : (msetX : MSet) → (mA : Model)
  → (f : catMSet [ msetX , F-ob ftrForgetModel mA ])
  → (mG : catModel [ F-ob ftrFreeModel msetX , mA ])
  → (λ sort → mG .carrierHom sort ∘ pureTerm sort) ≡ f
  → foldModel msetX mA f ≡ mG .carrierHom
foldModel-uniq msetX mA f mG ef i = mFoldModel-uniq msetX mA f mG ef i .carrierHom

foldModel-uniq2 : (msetX : MSet) → (mA : Model)
  → (mG mH : catModel [ F-ob ftrFreeModel msetX , mA ])
  → (λ (sort : Sort) → mG .carrierHom sort ∘ pureTerm sort)
   ≡ (λ (sort : Sort) → mH .carrierHom sort ∘ pureTerm sort)
  → mG .carrierHom ≡ mH .carrierHom
foldModel-uniq2 msetX mA mG mH e =
  mG .carrierHom
    ≡⟨ sym (foldModel-uniq msetX mA (λ sort → mG .carrierHom sort ∘ pureTerm sort) mG refl) ⟩
  foldModel msetX mA (λ sort → mG .carrierHom sort ∘ pureTerm sort)
    ≡⟨ foldModel-uniq msetX mA (λ sort → mG .carrierHom sort ∘ pureTerm sort) mH (sym e) ⟩
  mH .carrierHom ∎

-- catModel as a full subcategory of catModelF and catModel1

-- catModelFEq and catModel1Eq
respectsEqTheoryF : ModelF → Type
respectsEqTheoryF mA = ∀ {sort} → (axiom : Axiom sort)
  → (f : ∀ sort' → mtyp (msetArity axiom) sort' → mtyp (mA .fst .carrier) sort')
  → (mA .fst .str sort ∘ mapTermF f sort) (lhs axiom)
   ≡ (mA .fst .str sort ∘ mapTermF f sort) (rhs axiom)

catModelFEq : Category ℓ-zero ℓ-zero
catModelFEq = FullSubcategory catModelF respectsEqTheoryF

ModelFEq : Type
ModelFEq = ob catModelFEq

ModelFEqHom : (mFEqA mFEqB : ModelFEq) → Type
ModelFEqHom = Hom[_,_] catModelFEq

respectsEqTheory1 : Model1 → Type
respectsEqTheory1 m1A = respectsEqTheoryF (model1toF m1A)

catModel1Eq : Category ℓ-zero ℓ-zero
catModel1Eq = FullSubcategory catModel1 respectsEqTheory1

Model1Eq : Type
Model1Eq = ob catModel1Eq

Model1EqHom : (m1EqA m1EqB : Model1Eq) → Type
Model1EqHom = Hom[_,_] catModel1Eq

ftrModel1EqtoFEq : Functor catModel1Eq catModelFEq
ftrModel1EqtoFEq = MapFullSubcategory
  catModel1 respectsEqTheory1
  catModelF respectsEqTheoryF
  ftrModel1toF (λ m1A respectsEqTheory1A → respectsEqTheory1A)

ftrModelFEqto1Eq : Functor catModelFEq catModel1Eq
ftrModelFEqto1Eq = MapFullSubcategory
  catModelF respectsEqTheoryF
  catModel1 respectsEqTheory1
  ftrModelFto1 (λ mFA respectsEqTheoryFA → subst
    respectsEqTheoryF
    (cong (λ F → F-ob F mFA) (sym ftrModelFto1toF))
    respectsEqTheoryFA
  )

--------------

-- catModel1Eq → catModel

{-# TERMINATING #-}
model1EqtoQ-algStr : (m1EqA : Model1Eq) → IsAlgebra ftrTerm (m1EqA .fst .carrier)
model1EqtoQ-algStr m1EqA@(algebra msetA α1 , respectsEqA) sort (var x) = x
model1EqtoQ-algStr m1EqA@(algebra msetA α1 , respectsEqA) sort (ast t) =
  α1 sort (mapTerm1 (model1EqtoQ-algStr m1EqA) sort t)
model1EqtoQ-algStr m1EqA@(algebra msetA α1 , respectsEqA) sort (joinFQ t) =
  αF sort (mapTermF (model1EqtoQ-algStr m1EqA) sort t)
  where αF : IsAlgebra ftrTermF msetA
        αF = model1toF (algebra msetA α1) .fst .str
model1EqtoQ-algStr m1EqA@(algebra msetA α1 , respectsEqA) sort (joinFQ-varF t i) =
  model1EqtoQ-algStr m1EqA sort t
model1EqtoQ-algStr m1EqA@(algebra msetA α1 , respectsEqA) sort (joinFQ-astF t i) =
  α1 sort (mapTerm1 (model1EqtoQ-algStr m1EqA) sort (mapTerm1 (λ sort₁ → joinFQ) sort t))
model1EqtoQ-algStr m1EqA@(algebra msetA α1 , respectsEqA) sort (byAxiom axiom f i) =
  lemma2 i
  where αF : IsAlgebra ftrTermF msetA
        αF = model1toF (algebra msetA α1) .fst .str
        lemma : αF sort (mapTermF (λ sort' → model1EqtoQ-algStr m1EqA sort' ∘ f sort') sort (lhs axiom))
              ≡ αF sort (mapTermF (λ sort' → model1EqtoQ-algStr m1EqA sort' ∘ f sort') sort (rhs axiom))
        lemma = respectsEqA axiom λ sort' → model1EqtoQ-algStr m1EqA sort' ∘ f sort'
        lemma2 : αF sort (mapTermF (model1EqtoQ-algStr m1EqA) sort (mapTermF f sort (lhs axiom)))
               ≡ αF sort (mapTermF (model1EqtoQ-algStr m1EqA) sort (mapTermF f sort (rhs axiom)))
        lemma2 =
          αF sort (mapTermF (model1EqtoQ-algStr m1EqA) sort (mapTermF f sort (lhs axiom)))
            ≡⟨ sym (cong (αF sort) (funExt⁻ (funExt⁻ (mapTermF-∘ (model1EqtoQ-algStr m1EqA) f) sort) (lhs axiom))) ⟩
          αF sort (mapTermF (λ sort' → model1EqtoQ-algStr m1EqA sort' ∘ f sort') sort (lhs axiom))
            ≡⟨ lemma ⟩
          αF sort (mapTermF (λ sort' → model1EqtoQ-algStr m1EqA sort' ∘ f sort') sort (rhs axiom))
            ≡⟨ cong (αF sort) (funExt⁻ (funExt⁻ (mapTermF-∘ (model1EqtoQ-algStr m1EqA) f) sort) (rhs axiom)) ⟩
          αF sort (mapTermF (model1EqtoQ-algStr m1EqA) sort (mapTermF f sort (rhs axiom))) ∎
model1EqtoQ-algStr m1EqA@(algebra msetA α1 , respectsEqA) sort (isSetTerm t1 t2 et et' i j) = snd (msetA sort)
  (model1EqtoQ-algStr m1EqA sort t1)
  (model1EqtoQ-algStr m1EqA sort t2)
  (λ i → model1EqtoQ-algStr m1EqA sort (et i))
  (λ i → model1EqtoQ-algStr m1EqA sort (et' i)) i j

{-# TERMINATING #-}
model1EqtoQ-algStr-joinTerm : (m1EqA : Model1Eq)
  → (λ (sort : Sort) → model1EqtoQ-algStr m1EqA sort ∘ joinTerm sort)
  ≡ (λ (sort : Sort) → model1EqtoQ-algStr m1EqA sort ∘ mapTerm (model1EqtoQ-algStr m1EqA) sort)
mapTermF-model1EqtoQ-algStr-joinTerm : (m1EqA : Model1Eq)
  → (λ (sort : Sort) → mapTermF (model1EqtoQ-algStr m1EqA) sort ∘ mapTermF joinTerm sort)
  ≡ (λ (sort : Sort) → mapTermF (model1EqtoQ-algStr m1EqA) sort ∘ mapTermF (mapTerm (model1EqtoQ-algStr m1EqA)) sort)
model1EqtoQ-algStr-joinTerm m1EqA@(algebra msetA α1 , respectsEqA) i sort (var t) =
  model1EqtoQ-algStr m1EqA sort t
model1EqtoQ-algStr-joinTerm m1EqA@(algebra msetA α1 , respectsEqA) i sort (ast t) =
  α1 sort (mapTerm1 (model1EqtoQ-algStr-joinTerm m1EqA i) sort t)
model1EqtoQ-algStr-joinTerm m1EqA@(algebra msetA α1 , respectsEqA) i sort (joinFQ t) =
  αF sort (mapTermF-model1EqtoQ-algStr-joinTerm m1EqA i sort t)
  where αF : IsAlgebra ftrTermF msetA
        αF = model1toF (algebra msetA α1) .fst .str
model1EqtoQ-algStr-joinTerm m1EqA@(algebra msetA α1 , respectsEqA) i sort (joinFQ-varF t j) =
  idfun
    (Square
      (λ j → model1EqtoQ-algStr m1EqA sort (joinTerm sort t))
      (λ j → model1EqtoQ-algStr m1EqA sort
               (mapTerm (model1EqtoQ-algStr m1EqA) sort t))
      (λ i → αF sort (mapTermF-model1EqtoQ-algStr-joinTerm m1EqA i sort (varF t)))
      (λ i → model1EqtoQ-algStr-joinTerm m1EqA i sort t)
    ) (toPathP (snd (msetA sort) _ _ _ _)) i j
  where αF : IsAlgebra ftrTermF msetA
        αF = model1toF (algebra msetA α1) .fst .str
model1EqtoQ-algStr-joinTerm m1EqA@(algebra msetA α1 , respectsEqA) i sort (joinFQ-astF t j) =
  idfun
    (Square
      (λ j → (model1EqtoQ-algStr m1EqA sort ∘ joinTerm sort) (joinFQ-astF t j))
      (λ j → (model1EqtoQ-algStr m1EqA sort
                ∘ mapTerm (model1EqtoQ-algStr m1EqA) sort) (joinFQ-astF t j))
      (λ i → αF sort (mapTermF-model1EqtoQ-algStr-joinTerm m1EqA i sort (astF t)))
      (λ i → α1 sort (mapTerm1 (model1EqtoQ-algStr-joinTerm m1EqA i)
                 sort (mapTerm1 (λ sort₁ → joinFQ) sort t)))
    ) (toPathP (snd (msetA sort) _ _ _ _)) i j
  where αF : IsAlgebra ftrTermF msetA
        αF = model1toF (algebra msetA α1) .fst .str
model1EqtoQ-algStr-joinTerm m1EqA@(algebra msetA α1 , respectsEqA) i sort (byAxiom axiom f j) =
  idfun
    (Square
      (λ j → (model1EqtoQ-algStr m1EqA sort ∘ joinTerm sort) (byAxiom axiom f j))
      (λ j → (model1EqtoQ-algStr m1EqA sort
               ∘ mapTerm (model1EqtoQ-algStr m1EqA) sort) (byAxiom axiom f j))
      (λ i → αF sort (mapTermF-model1EqtoQ-algStr-joinTerm m1EqA i sort (mapTermF f sort (lhs axiom))))
      (λ i → αF sort (mapTermF-model1EqtoQ-algStr-joinTerm m1EqA i sort (mapTermF f sort (rhs axiom))))
    ) (toPathP (snd (msetA sort) _ _ _ _)) i j
  where αF : IsAlgebra ftrTermF msetA
        αF = model1toF (algebra msetA α1) .fst .str
model1EqtoQ-algStr-joinTerm m1EqA@(algebra msetA α1 , respectsEqA) i sort (isSetTerm t1 t2 et et' j k) = snd (msetA sort)
  (model1EqtoQ-algStr-joinTerm m1EqA i sort t1)
  (model1EqtoQ-algStr-joinTerm m1EqA i sort t2)
  (λ j → model1EqtoQ-algStr-joinTerm m1EqA i sort (et j))
  (λ j → model1EqtoQ-algStr-joinTerm m1EqA i sort (et' j)) j k
mapTermF-model1EqtoQ-algStr-joinTerm m1EqA =
  (λ sort → mapTermF (model1EqtoQ-algStr m1EqA) sort ∘ mapTermF joinTerm sort)
    ≡⟨ sym (mapTermF-∘ (model1EqtoQ-algStr m1EqA) joinTerm) ⟩
  mapTermF (λ sort → model1EqtoQ-algStr m1EqA sort ∘ joinTerm sort)
    ≡⟨ cong mapTermF (model1EqtoQ-algStr-joinTerm m1EqA) ⟩
  mapTermF (λ sort → model1EqtoQ-algStr m1EqA sort ∘ mapTerm (model1EqtoQ-algStr m1EqA) sort)
    ≡⟨ mapTermF-∘ (model1EqtoQ-algStr m1EqA) (mapTerm (model1EqtoQ-algStr m1EqA)) ⟩
  (λ sort → mapTermF (model1EqtoQ-algStr m1EqA) sort ∘ mapTermF (mapTerm (model1EqtoQ-algStr m1EqA)) sort) ∎

model1EqtoQ-isEMAlgebra : (m1EqA : Model1Eq)
  → IsEMAlgebra monadTerm (algebra (m1EqA .fst .carrier) (model1EqtoQ-algStr m1EqA))
str-η (model1EqtoQ-isEMAlgebra m1EqA@(algebra msetA α1 , respectsEqA)) = refl
str-μ (model1EqtoQ-isEMAlgebra m1EqA@(algebra msetA α1 , respectsEqA)) = model1EqtoQ-algStr-joinTerm m1EqA

model1EqtoQ : Model1Eq → Model
carrier (fst (model1EqtoQ m1EqA@(algebra msetA α1 , respectsEqA))) = msetA
str (fst (model1EqtoQ m1EqA@(algebra msetA α1 , respectsEqA))) = model1EqtoQ-algStr m1EqA
snd (model1EqtoQ m1EqA@(algebra msetA α1 , respectsEqA)) = model1EqtoQ-isEMAlgebra m1EqA

{-# TERMINATING #-}
ModelHom1Eq→IsTermAlgebraHom' : ∀ m1EqA m1EqB → (m1EqF : Model1EqHom m1EqA m1EqB) →
      (sort : Sort) (t : Term (mtyp (m1EqA .fst .carrier)) sort) →
      carrierHom m1EqF sort (model1EqtoQ-algStr m1EqA sort t)
      ≡ model1EqtoQ-algStr m1EqB sort (mapTerm (carrierHom m1EqF) sort t)
mapTermF-ModelHom1Eq→IsTermAlgebraHom' : ∀ m1EqA m1EqB → (m1EqF : Model1EqHom m1EqA m1EqB) →
      (sort : Sort) (t : TermF (Term (mtyp (m1EqA .fst .carrier))) sort) →
      carrierHom m1EqF sort (model1toF-algStr (m1EqA .fst) sort (mapTermF (model1EqtoQ-algStr m1EqA) sort t))
      ≡ model1toF-algStr (m1EqB .fst) sort
        (mapTermF (model1EqtoQ-algStr m1EqB) sort (mapTermF (mapTerm (carrierHom m1EqF)) sort t))
ModelHom1Eq→IsTermAlgebraHom' m1EqA m1EqB m1EqF@(algebraHom f f-isalg1) sort (var x) = refl
ModelHom1Eq→IsTermAlgebraHom' m1EqA m1EqB m1EqF@(algebraHom f f-isalg1) sort (ast t) =
  f sort (str (fst m1EqA) sort (mapTerm1 (model1EqtoQ-algStr m1EqA) sort t))
    ≡⟨ funExt⁻ (funExt⁻ f-isalg1 sort) (mapTerm1 (model1EqtoQ-algStr m1EqA) sort t) ⟩
  str (fst m1EqB) sort (mapTerm1 f sort (mapTerm1 (model1EqtoQ-algStr m1EqA) sort t))
    ≡⟨ cong (str (fst m1EqB) sort) (funExt⁻ (funExt⁻ (cong mapTerm1 (
      (λ sort' → f sort' ∘ model1EqtoQ-algStr m1EqA sort')
        ≡⟨ (funExt λ sort' → funExt λ t' → ModelHom1Eq→IsTermAlgebraHom' m1EqA m1EqB m1EqF sort' t') ⟩
      (λ sort' → model1EqtoQ-algStr m1EqB sort' ∘ mapTerm f sort') ∎
    )) sort) t) ⟩
  str (fst m1EqB) sort (mapTerm1 (model1EqtoQ-algStr m1EqB) sort (mapTerm1 (mapTerm f) sort t)) ∎
ModelHom1Eq→IsTermAlgebraHom' m1EqA m1EqB m1EqF sort (joinFQ t) i =
  mapTermF-ModelHom1Eq→IsTermAlgebraHom' m1EqA m1EqB m1EqF sort t i
-- The following all follows from Sethood but there seems to be a de Bruijn error in agda-cubical?
ModelHom1Eq→IsTermAlgebraHom'
  m1EqA@(algebra msetA α1 , respectsEqA)
  m1EqB@(algebra msetB β1 , respectsEqB)
  m1EqF@(algebraHom f f-isalg1) sort (joinFQ-varF t j) i =
  {!idfun
    (Square
      (λ j → f sort
         (model1EqtoQ-algStr (algebra msetA α1 , respectsEqA) sort t))
      (λ j → model1EqtoQ-algStr (algebra msetB β1 , respectsEqB)
         sort (mapTerm f sort t))
      (λ i → mapTermF-ModelHom1Eq→IsTermAlgebraHom'
         (algebra msetA α1 , respectsEqA) (algebra msetB β1 , respectsEqB)
         (algebraHom f f-isalg1) sort (varF t) {!i!})
      (λ i → ModelHom1Eq→IsTermAlgebraHom'
         (algebra msetA α1 , respectsEqA) (algebra msetB β1 , respectsEqB)
         (algebraHom f f-isalg1) sort t i)
    ) (toPathP (snd (msetB sort) _ _ _ _)) i j!}
ModelHom1Eq→IsTermAlgebraHom' m1EqA m1EqB@(algebra msetB β1 , respectsEqB) m1EqF sort (joinFQ-astF t j) i =
  {!idfun
    (Square
      (λ j → {!!})
      (λ j → {!!})
      (λ i → {!!})
      (λ i → {!!})
    ) (toPathP (snd (msetB sort) _ _ _ _)) i j!}
ModelHom1Eq→IsTermAlgebraHom' m1EqA m1EqB@(algebra msetB β1 , respectsEqB) m1EqF sort (byAxiom axiom g j) i =
  {!idfun
    (Square
      (λ j → {!!})
      (λ j → {!!})
      (λ i → {!!})
      (λ i → {!!})
    ) (toPathP (snd (msetB sort) _ _ _ _)) i j!}
ModelHom1Eq→IsTermAlgebraHom' m1EqA m1EqB@(algebra msetB β1 , respectsEqB) m1EqF sort (isSetTerm t1 t2 et et' j k) i =
  {!snd (msetB sort)
    ?
    ?
    ?
    ? j k!}
mapTermF-ModelHom1Eq→IsTermAlgebraHom'
  m1EqA@(algebra msetA α1 , respectsEqA)
  m1EqB@(algebra msetB β1 , respectsEqB)
  m1EqF@(algebraHom f f-isalg1) sort t =
    f sort (αF sort (mapTermF (model1EqtoQ-algStr m1EqA) sort t))
      ≡⟨ funExt⁻ (funExt⁻ f-isalgF sort) (mapTermF (model1EqtoQ-algStr m1EqA) sort t) ⟩
    βF sort (mapTermF f sort (mapTermF (model1EqtoQ-algStr m1EqA) sort t))
      ≡⟨ cong (βF sort) (funExt⁻ (funExt⁻ (
        (λ sort' → mapTermF f sort' ∘ mapTermF (model1EqtoQ-algStr m1EqA) sort')
          ≡⟨ sym (mapTermF-∘ f (model1EqtoQ-algStr m1EqA)) ⟩
        mapTermF (λ sort₁ → f sort₁ ∘ model1EqtoQ-algStr (algebra msetA α1 , respectsEqA) sort₁)
          ≡⟨ cong mapTermF (funExt λ sort' → funExt λ t' → ModelHom1Eq→IsTermAlgebraHom' m1EqA m1EqB m1EqF sort' t') ⟩
        mapTermF (λ sort₁ → model1EqtoQ-algStr m1EqB sort₁ ∘ mapTerm f sort₁)
          ≡⟨ mapTermF-∘ (model1EqtoQ-algStr m1EqB) (mapTerm f) ⟩
        (λ sort' → mapTermF (model1EqtoQ-algStr m1EqB) sort' ∘ mapTermF (mapTerm f) sort') ∎
      ) sort) t) ⟩
    βF sort (mapTermF (model1EqtoQ-algStr m1EqB) sort (mapTermF (mapTerm f) sort t)) ∎
  where αF : IsAlgebra ftrTermF msetA
        αF = model1toF (algebra msetA α1) .fst .str
        βF : IsAlgebra ftrTermF msetB
        βF = model1toF (algebra msetB β1) .fst .str
        f-isalgF : IsAlgebraHom ftrTermF (algebra msetA αF) (algebra msetB βF) f
        f-isalgF = strHom (model1toF-hom m1EqF)

{-

  {!!}
    ≡⟨ {!!} ⟩
  {!!}
-}

ModelHom1Eq→IsTermAlgebraHom : ∀ m1EqA m1EqB → (m1EqF : Model1EqHom m1EqA m1EqB) →
      (λ (sort : Sort) (t : Term (mtyp (m1EqA .fst .carrier)) sort)
        → carrierHom m1EqF sort (model1EqtoQ-algStr m1EqA sort t))
      ≡
      (λ (sort : Sort) (t : Term (mtyp (m1EqA .fst .carrier)) sort)
        → model1EqtoQ-algStr m1EqB sort (mapTerm (carrierHom m1EqF) sort t))
ModelHom1Eq→IsTermAlgebraHom m1EqA m1EqB m1EqF i sort t =
  ModelHom1Eq→IsTermAlgebraHom' m1EqA m1EqB m1EqF sort t i

ModelHom1Eq→ModelHom : ∀ m1EqA m1EqB → Model1EqHom m1EqA m1EqB → ModelHom (model1EqtoQ m1EqA) (model1EqtoQ m1EqB)
carrierHom (ModelHom1Eq→ModelHom m1EqA m1EqB m1EqF) = carrierHom m1EqF
strHom (ModelHom1Eq→ModelHom m1EqA m1EqB m1EqF) = ModelHom1Eq→IsTermAlgebraHom m1EqA m1EqB m1EqF

ftrModel1EqtoQ : Functor catModel1Eq catModel
F-ob ftrModel1EqtoQ = model1EqtoQ
F-hom ftrModel1EqtoQ {m1EqA} {m1EqB} = ModelHom1Eq→ModelHom m1EqA m1EqB
F-id ftrModel1EqtoQ = AlgebraHom≡ ftrTerm refl
F-seq ftrModel1EqtoQ f g = AlgebraHom≡ ftrTerm refl

---------

-- catModel → catModelFEq

ftrModelQtoF : Functor catModel catModelF
ftrModelQtoF = EMFunctor monadTermFtoQ

modelQtoF : Model → ModelF
modelQtoF = F-ob ftrModelQtoF

modelQtoF-respectsEqTheoryF : (mA : Model) → respectsEqTheoryF (modelQtoF mA)
modelQtoF-respectsEqTheoryF mA@(algebra msetA αQ , isEMA) {sort} axiom f = cong (αQ sort) (
  termFtoQ sort (mapTermF f sort (lhs axiom))
    ≡⟨ sym (funExt⁻ (funExt⁻ lemma sort) (lhs axiom)) ⟩
  joinFQ (mapTermF (λ sort' x → var (f sort' x)) sort (lhs axiom))
    ≡⟨ modelQtoF-respectsEqTheoryF' ⟩
  joinFQ (mapTermF (λ sort' x → var (f sort' x)) sort (rhs axiom))
    ≡⟨ funExt⁻ (funExt⁻ lemma sort) (rhs axiom) ⟩
  termFtoQ sort (mapTermF f sort (rhs axiom)) ∎
  )
  where modelQtoF-respectsEqTheoryF' : joinFQ (mapTermF (λ sort' x → pureTerm sort' (f sort' x)) sort (lhs axiom))
                                     ≡ joinFQ (mapTermF (λ sort' x → pureTerm sort' (f sort' x)) sort (rhs axiom))
        modelQtoF-respectsEqTheoryF' = byAxiom axiom (λ sort' → pureTerm sort' ∘ f sort')
        lemma : (λ (sort : Sort) → joinFQ ∘ mapTermF (λ sort' x → pureTerm sort' (f sort' x)) sort)
              ≡ (λ (sort : Sort) → termFtoQ sort ∘ mapTermF f sort)
        lemma =
          (λ sort → joinFQ ∘ mapTermF (λ sort' x → pureTerm sort' (f sort' x)) sort)
            ≡⟨ (funExt λ sort → cong (joinFQ ∘_) (funExt⁻ (mapTermF-∘ pureTerm f) sort)) ⟩
          (λ sort → joinFQ ∘ mapTermF pureTerm sort ∘ mapTermF f sort)
            ≡⟨ (funExt λ sort → cong (_∘ mapTermF f sort) (funExt⁻ joinFQ-mapTermF-pureTerm sort)) ⟩
          (λ sort → termFtoQ sort ∘ mapTermF f sort) ∎

ftrModelQtoFEq : Functor catModel catModelFEq
ftrModelQtoFEq = ToFullSubcategory catModel catModelF respectsEqTheoryF ftrModelQtoF modelQtoF-respectsEqTheoryF

-----

isoftrModelFEq→Model : P.PrecatIso (CatPrecategory ℓ-zero ℓ-zero) catModelFEq catModel
P≅.mor isoftrModelFEq→Model = {!!}
P≅.inv isoftrModelFEq→Model = {!!}
P≅.sec isoftrModelFEq→Model = {!!}
P≅.ret isoftrModelFEq→Model = {!!}
